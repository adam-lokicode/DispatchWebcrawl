const { Builder, By } = require('selenium-webdriver');\nconst chrome = require('selenium-webdriver/chrome');\n\nasync function inspectDATOne() {\n    console.log('üîç Using Selenium to inspect DAT One page...');\n    \n    // Connect to existing Chrome instance\n    const options = new chrome.Options();\n    options.options_['debuggerAddress'] = 'localhost:9222';\n    \n    const driver = await new Builder()\n        .forBrowser('chrome')\n        .setChromeOptions(options)\n        .build();\n\n    try {\n        console.log('‚úÖ Connected to existing Chrome instance');\n        \n        const currentUrl = await driver.getCurrentUrl();\n        console.log('üìç Current URL:', currentUrl);\n        \n        await driver.sleep(2000);\n        \n        // Test basic selectors\n        console.log('\\nüîç Testing selectors...');\n        const selectors = [\n            'tr',\n            '[role=\"row\"]',\n            '.data-item',\n            '[class*=\"row\"]',\n            'table tbody tr'\n        ];\n        \n        for (const selector of selectors) {\n            try {\n                const elements = await driver.findElements(By.css(selector));\n                console.log(`${selector}: ${elements.length} elements`);\n                \n                if (elements.length > 0 && elements.length < 20) {\n                    const firstElement = elements[0];\n                    const text = await firstElement.getText();\n                    const className = await firstElement.getAttribute('class') || '';\n                    \n                    if (text && text.length > 5) {\n                        console.log(`  First element: ${className}`);\n                        console.log(`  Text: ${text.substring(0, 60)}`);\n                    }\n                }\n            } catch (e) {\n                console.log(`${selector}: Error`);\n            }\n        }\n        \n        // Look for .data-item specifically\n        console.log('\\nüìã Looking for .data-item elements...');\n        try {\n            const dataItems = await driver.findElements(By.css('.data-item'));\n            console.log(`Found ${dataItems.length} .data-item elements`);\n            \n            for (let i = 0; i < Math.min(5, dataItems.length); i++) {\n                const item = dataItems[i];\n                const text = await item.getText();\n                const innerHTML = await driver.executeScript('return arguments[0].innerHTML;', item);\n                \n                console.log(`${i + 1}. Text: \"${text}\"`);\n                console.log(`   HTML: ${innerHTML}`);\n            }\n        } catch (e) {\n            console.log('Error finding .data-item elements');\n        }\n        \n        // Try clicking a table row\n        console.log('\\nüéØ Testing row clicks...');\n        try {\n            const rows = await driver.findElements(By.css('tr'));\n            if (rows.length > 1) {\n                // Skip header row, click second row\n                const testRow = rows[1];\n                const rowText = await testRow.getText();\n                \n                if (rowText && rowText.length > 10) {\n                    console.log(`Clicking row with text: ${rowText.substring(0, 50)}`);\n                    await testRow.click();\n                    await driver.sleep(1500);\n                    \n                    // Check for modal\n                    const modals = await driver.findElements(By.css('[role=\"dialog\"], .modal'));\n                    if (modals.length > 0) {\n                        console.log(`‚úÖ Modal opened! Found ${modals.length} modal(s)`);\n                        \n                        // Look for .data-item in modal\n                        const modalDataItems = await driver.findElements(By.css('[role=\"dialog\"] .data-item'));\n                        console.log(`Modal has ${modalDataItems.length} .data-item elements`);\n                        \n                        if (modalDataItems.length > 0) {\n                            for (let k = 0; k < Math.min(3, modalDataItems.length); k++) {\n                                const itemText = await modalDataItems[k].getText();\n                                console.log(`  Modal item ${k + 1}: \"${itemText}\"`);\n                            }\n                        }\n                        \n                        // Try to close modal\n                        try {\n                            await driver.executeScript('document.querySelector(\"[role=\\\\\"dialog\\\\\"]\").style.display = \"none\";');\n                        } catch (e) {\n                            // Modal might close automatically\n                        }\n                    } else {\n                        console.log('‚ùå No modal opened');\n                    }\n                }\n            }\n        } catch (e) {\n            console.log('Error testing row clicks:', e.message.substring(0, 50));\n        }\n        \n        // Get page source sample\n        console.log('\\nüìÑ Checking page source...');\n        const pageSource = await driver.getPageSource();\n        const dataItemMatches = pageSource.match(/class=\"data-item\"[^>]*>([^<]+)/g);\n        if (dataItemMatches) {\n            console.log('Found .data-item in source:');\n            dataItemMatches.slice(0, 3).forEach((match, i) => {\n                console.log(`  ${i + 1}. ${match}`);\n            });\n        } else {\n            console.log('No .data-item found in page source');\n        }\n        \n    } catch (error) {\n        console.error('‚ùå Selenium error:', error.message);\n    } finally {\n        await driver.quit();\n    }\n}\n\ninspectDATOne().catch(console.error);"
